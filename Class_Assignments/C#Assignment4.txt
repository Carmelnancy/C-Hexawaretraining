using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Security;
using System.Text;
using System.Threading.Tasks;

namespace ClassAssignments
{
    internal class TimePeriod
    {
        private double time;

        public double Time { get { return time; } set { time = value / 3600; } }

    }
    internal class Assignment4
    {
        static void Main(string[] args)
        {
            //TimePeriod timeInSec = new TimePeriod();
            //timeInSec.Time = 46000;
            //Console.WriteLine(timeInSec.Time);

            //Chair c=new Chair("teak wood","brown",4);
            //BookShelf b=new BookShelf(6,"wood","grey");

            //c.displayDetails();
            //b.displayDetails();

            //StringHw.StringL();
            //StringHw.StringR();
            //StringHw.StringC();

            Student s = new Student(1, "Nancy", "10th", 8, "ECE");
            s.getMarks();
            s.DisplayData();

            DayScholar ds = new DayScholar(1, "Alice", 5000);
            Resident rs = new Resident(2, "Bob", 5000, 3000);

            ds.ShowDetails();
            rs.ShowDetails();

            try
            {
                BankAccount b = new BankAccount("Nancy", 50000);
                b.TransferAmount();
            }
            catch(InsufficientBalamceException e)
            {
                Console.WriteLine(e.Message);
            }

            Console.ReadKey();
        }
    }

    abstract class Furniture
    {
        public string material;
        public string colour;

        public Furniture(string material, string colour)
        {
            this.material = material;
            this.colour = colour;
        }

        public abstract void displayDetails();

    }
    class Chair : Furniture
    {
        public int leg;
        public Chair(String material, String colour, int leg) : base(material, colour)
        {
            this .leg = leg;
        }

        public override void displayDetails()
        {
            Console.WriteLine($"Material : {material} ,Colour : {colour} , Legs : {leg}");
        }
    }
    class BookShelf : Furniture 
    {
        public int rows;

        public BookShelf(int rows,string material,String colour) : base(material, colour)
        {
            this.rows = rows;
        }

        public override void displayDetails()
        {
            Console.WriteLine($"Material : {material} ,Colour : {colour} , Rows : {rows}");
        }
    }

    class StringHw
    {
        public static void StringL()
        {
            Console.WriteLine("Enter your name : ");
            string name = Console.ReadLine();
            Console.WriteLine($"The length of your name {name} is " + name.Length);
        }
        public static void StringR()
        {
            Console.WriteLine("Enter a string : ");
            string name = Console.ReadLine();
            char[] chars = name.ToCharArray();
            Array.Reverse(chars);
            Console.WriteLine("Reversed String is "+new string(chars));

        }

        public static void StringC()
        {
            Console.WriteLine("Enter str1 :");
            string str1 = Console.ReadLine();
            Console.WriteLine("Enter str2 :");
            string str2 = Console.ReadLine();
            if (str1.Equals(str2))
            {
                Console.WriteLine("Equal");
            }
            else
            {
                Console.WriteLine("Not equal");
            }
        }
    }
    class Student
    {
        public int rollno;
        public string name;
        public string _class;
        public int sem;
        public string branch;
        public int[] marks=new int[5];

        public Student(int rollno, string name, string _class,int sem,string branch)
        {
            this.rollno = rollno;
            this.name = name;
            this._class = _class;
            this.sem = sem;
            this.branch = branch;
        }

        public void getMarks()
        {
            for (int i = 0; i < marks.Length; i++)
            {
                Console.WriteLine("enter the mark of sub "+(i+1));
                marks[i]=int.Parse(Console.ReadLine());
            } 
        }
        public void DisplayResult()
        {
            int sum = 0;
            bool result=false;
            for (int i = 0; i < marks.Length; i++)
            {
                if (marks[i] < 35)
                    result = true;
                sum += marks[i];
            }
            double avg=(double)sum/marks.Length;
            if (result || avg < 50)
            {
                Console.WriteLine("Failed");
            }
            else
            {
                Console.WriteLine("Pass");
            }
        }
        public void DisplayData()
        {
            Console.WriteLine("Roll No : "+rollno);
            Console.WriteLine("Name : " + name);
            Console.WriteLine("Class : "+_class);
            Console.WriteLine("Semester : "+sem);
            Console.WriteLine("Branch : "+branch);
            DisplayResult();
        }
    }
    interface IStudent
    {
        int id { get; set; }
        string name { get; set; }
        double fees { get; set; }
        void ShowDetails();
    }

    class DayScholar : IStudent 
    {
        public int id { get; set; }
        public string name { get; set; }
        public double fees { get; set; }
        public DayScholar(int id, string name, double fees)
        {
            this.id = id;
            this.name = name;
            this.fees = fees;
        }
        public void ShowDetails()
        {
            Console.WriteLine("Id " + id);
            Console.WriteLine("Name " + name);
            Console.WriteLine("Fees " + fees);
        }
    }
    class Resident : IStudent 
    {
        public int id { get; set; }
        public string name { get; set; }
        public double fees { get; set; }
        public double accomodation { get; set; }
        public Resident(int id, string name, double fees,double accomodation)
        {
            this.id = id;
            this.name = name;
            this.fees = fees;
            this.accomodation = accomodation;
        }
        public void ShowDetails()
        {
            Console.WriteLine("Id "+id);
            Console.WriteLine("Name "+name);
            Console.WriteLine("Fees "+(fees+accomodation));
        }
    }

    // User Exception
    class InsufficientBalamceException : ApplicationException
    {
        public InsufficientBalamceException(string  message) : base(message) { }
    }

    class BankAccount
    {
        public string AccountHolder { get; set; }
        public double Balance { get; private set; }

        public BankAccount(string accountHolder, double balance)
        {
            AccountHolder = accountHolder;
            Balance = balance;
        }

        public void TransferAmount()
        {
            Console.WriteLine("Enter the amount to transfer :");
            double x = Convert.ToDouble(Console.ReadLine());
            if (x > Balance)
            {
                throw (new InsufficientBalamceException("You don't have enough balance to transfer the amount"));
            }
            else
            {
                Console.WriteLine("Transaction made successfully");
            }
        }
    }
}
